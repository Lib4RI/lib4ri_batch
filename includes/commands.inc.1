<?php
abstract class command{
    protected   $pid;
    protected   $dry;
    protected   $object;
    protected   $message;
    protected   $stop;
    
    public function __construct($pid, $dry, $options) {
        $this->pid = $pid;
        $this->dry = $dry;
        $this->options = $options;
        $this->message = '';
        $this->stop = false;
    }

    public function exec(){
        $this->retrieve_islandora_object();
        if (!$this->object){
            $this->message = $this->get_pid().': object not found';
            $this->stop = true;
        }
        
        if ($this->stop == false)
            $this->_dry_exec();
        
        if (($this->dry == false) && ($this->stop == false))
            $this->_exec();
        
        if ($this->dry == true)
            $this->message = "DRY RUN - ".$this->message;
        
        return $this->message;
    }
    
    abstract protected function _dry_exec();
    
    abstract protected function _exec();
        
    protected function retrieve_islandora_object(){
        $this->object = islandora_object_load($this->pid);
    }  
    
    protected function get_pid(){
        return $this->pid;
    }
    
    protected function has_children (){
        $query = <<<EOQ
ASK {
  ?subject <fedora-model:hasModel> <info:fedora/fedora-system:FedoraObject-3.0> ;
           ?pred <info:fedora/$this->pid> .
}
EOQ;
        
        $child_results = $this->object->repository->ri->sparqlQuery($query);
        return $child_results[0]['k0']['value'] == 'true';
    }
}

/********************************************************************
 *
 *
 *
 ********************************************************************/

class purge extends command{

    protected function _dry_exec(){
//        $this->retrieve_islandora_object();
        if (!$this->object){
            $this->message = $this->get_pid().': object not found';
            $this->stop = true;
        }
        elseif ($this->has_children()){
            $this->message = $this->get_pid().': Has children. Cannot purge';
            $this->stop = true;
        }
        else{
            $this->message = $this->get_pid().': Purging...';
        }
    }

    protected function _exec(){
        $this->object->repository->purgeObject($this->pid);
        $this->message.=' Purged';
    }    
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
class show_type extends command{
    
    private function get_pub_type(AbstractObject $object) {
        $dom = new DOMDocument();
        $mods = $object['MODS']->content;
        if ($mods){
            $dom->loadXML($object['MODS']->content);
            $xpath = new DOMXPath($dom);
            $xpath->registerNamespace('m', 'http://loc.gov/mods/v3');
            
            
            $mods = $xpath->query('//mods:mods');
            $type = $xpath->evaluate('normalize-space(concat(mods:genre[@authorityURI="info:eu-repo/semantics"], " "))', $mods[0]);
        }
        else
            $type = 'WARNING: No MODS!!!';
        return $type;
        
    }
    protected function _dry_exec(){
        $this->message.= $this->get_pid().": ".$this->get_pub_type($this->object);
    }
    
    protected function _exec(){
        return 0;
    }
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
abstract class batch_edit_mxds extends command{ 
    
    private   $mxds;
    private   $dc;
    private   $mxds_content;
    private   $dc_content;
    private   $dom;
    private   $xpath;
    protected $edited = false;
    protected $update_dc = false; //To be overridden in subclasses if DC update is required
    protected $mxds_type = ''; //To be overridden in subclasses
    protected $mxds_namespaceURI = ''; //To be overridden in subclasses
    protected $working_dir;
    
    protected function _dry_exec(){
//        $this->retrieve_islandora_object();
        if (in_array("ir:citationCModel", $this->object->models) or in_array("islandora:personCModel", $this->object->models)){
            $this->retrieve_mxds();
            $this->retrieve_mxds_content();
            $this->mxds_content = $this->edit_mxds(); //To be implemented in subclasses
            if ($this->mxds_content == $this->mxds->content){
                $this->edited = false;
                $this->message = $this->get_pid().": $this->mxds_type not edited";
            }
            else{
                $this->edited = true;
                $this->message = $this->get_pid().": $this->mxds_type edited";
                if ($this->options['log_ds'] == true){
                    $this->log_ds($this->mxds_content,$this->mxds_type.'_new');
                    $this->log_ds($this->mxds->content,$this->mxds_type.'_old');
                }
            }
            if ($this->update_dc && $this->edited){
                $this->edit_dc();
                $this->message.=', DC regenerated';
                if ($this->options['log_ds'] == true){
                    $this->log_ds($this->dc_content,'DC_new');
                    $this->log_ds($this->dc->content,'DC_old');
                }
            }
        }
        else{
            $this->message = $this->get_pid().': Not a valid object';
            $this->stop = true;
        }       
    }
    
    protected function _exec(){
        if ($this->edited == true){
            $this->ingest_mxds();
            if ($this->update_dc)
                $this->ingest_dc();
            $this->message.=" - Ingested";
        }
        else 
            $this->message.=" - Not ingested";
    }
    

    protected function get_mxds_content(){
        return $this->mxds_content;
    }
    
    protected function set_mxds_content($content){
        $this->mxds_content = $content;
    }
    
        
    private function retrieve_mxds(){
        foreach ($this->object as $datastream) {
            if ($datastream->id === $this->mxds_type){
                $this->mxds = $datastream;
                break;
            }
        }        
        //$this->retrieve_ds($this->mods, 'MODS');
    }

    private function retrieve_mxds_content(){
        $this->mxds_content = $this->mxds->content;
    }
    
    abstract protected function edit_mxds();
    
    private function ingest_mxds(){
        $this->mxds->content = $this->mxds_content;
    }

    private function retrieve_dc(){
        foreach ($this->object as $datastream) {
            if ($datastream->id === 'DC'){
                $this->dc = $datastream;
                break;
            }
        }
        
//        $this->retrieve_ds($this->dc, 'DC');
    }
    
    protected function set_dom(){
        $this->dom = new DOMDocument();
        $this->dom->loadXML($this->mxds_content);
    }
    
    protected function get_dom(){
        return $this->dom;
    }
    
    protected function set_xpath(){
        $this->xpath = new DOMXPath($this->dom);
        $this->xpath->registerNamespace(strtolower($this->mxds_type), $this->mxds_namespaceURI);
    }
    
    protected function get_xpath(){
        return $this->xpath;
    }
    
    abstract protected function get_mxds_to_dc();
    
    private function edit_dc(){
        $this->retrieve_dc();
        $this->dc_content = static::runXSLTransform(array(
            'xsl' => $this->get_mxds_to_dc(),
//            'xsl' => drupal_get_path('module', 'islandora_importer') . '/xsl/mods_to_dc.xsl',
            'input' => $this->get_mxds_content(),
        ));
        
    }
    
    private function ingest_dc(){
        if (!($this->dc_content === $this->dc->content)) {
            $this->dc->content = $this->dc_content;
        }
    }

    private static function runXSLTransform($info) {
        $xsl = new DOMDocument();   
        $xsl->load($info['xsl']);
        
        $input = new DOMDocument();
        $input->loadXML($info['input']);
        
        $processor = new XSLTProcessor();
        $processor->importStylesheet($xsl);
        
        return $processor->transformToXML($input);
    }
    
    private function retrieve_ds($class_var, $ds_string){
        foreach ($this->object as $datastream) {
            if ($datastream->id === '$ds_string'){
                $class_var = $datastream;
                break;
            }
        }
    }  
    
    private function log_ds($ds_content, $ds_name){
        $filename = date('Y-m-d_H-i-s').'_'.$this->pid.'_'.$ds_name;
        if ($this->options['wd'])
            $wd = $this->options['wd'].'/';
        else
            $wd = null;
        $fid = fopen($wd.$filename, 'w');
        fwrite($fid, $ds_content);
        fclose($fid);
    }
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
abstract class batch_edit_mods extends batch_edit_mxds{
    protected $mxds_type = 'MODS'; 
    protected $mxds_namespaceURI = 'http://loc.gov/mods/v3'; 
    
    function get_mxds_to_dc(){
        return drupal_get_path('module', 'islandora_importer') . '/xsl/mods_to_dc.xsl';
    }
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
abstract class batch_edit_mads extends batch_edit_mxds{
    protected $mxds_type = 'MADS'; 
    protected $mxds_namespaceURI = '';

    function get_mxds_to_dc(){
        return drupal_get_path('module', 'zip_importer') . '/xsl/mads_to_dc.xsl';
    }
    
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
class update_publisher extends batch_edit_mods{
    protected $update_dc = true;
    
    protected function edit_mxds(){
        $this->set_dom();
        $this->set_xpath();
        $section = $this->get_xpath()->query('//mods:mods/mods:relatedItem [@type="host"]')[0];
        if($section){
            $publisher = $section->getElementsByTagName('publisher')->item(0)->nodeValue;
        }
        
        if ($publisher == $this->options['current']){
            $section->getElementsByTagName('publisher')->item(0)->nodeValue = $this->options['new'];
            return $this->get_dom()->saveXML();
        } 
        return $this->get_mxds_content();
    }
    
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
class first_name extends batch_edit_mods{
    protected $update_dc = false;
    
    protected function edit_mxds(){
        
        $roles = explode(';',$this->options['roles']);
        
        $this->set_dom();
        $this->set_xpath();
        $edited = false;
        foreach ($roles as $role){
            $section = $this->get_xpath()->query("//mods:mods/mods:name [@type=\"personal\"  and mods:role/mods:roleTerm=\"$role\"]")[0];
            if($section && (empty($section->getAttribute('usage')))){
                $section->setAttribute('usage', 'primary');
                $edited = true;
            }
        }

        if ($edited)
            return $this->get_dom()->saveXML();
        else
            return $this->get_mxds_content();
    }
}
    
/********************************************************************
 *
 *
 *
 ********************************************************************/
class update_cit_dep_name extends batch_edit_mods{
    protected $update_dc = false;
    
    protected function edit_mxds(){
        $this->set_dom();
        $this->set_xpath();
        $sections = $this->get_xpath()->query('//mods:mods/mods:name [@type="personal"]');
          
        $edited = false;
        $roles = array('author', 'thesis advisor', 'editor');
        $authors = [];
        foreach ($sections as $section){
#            if ($section->getElementsByTagName('roleTerm')->item(0)->nodeValue == 'author'){
            if (in_array($section->getElementsByTagName('roleTerm')->item(0)->nodeValue, $roles)){
                $affiliations = $section->getElementsByTagName('affiliation');
                foreach ($affiliations as $affiliation){
                    //->item(0)->nodeValue;
                    if (preg_replace('/\s+/', ' ', $affiliation->nodeValue) == $this->options['current']){
                        $affiliation->nodeValue = $this->options['new'];
                        $elements = $section->getElementsByTagName('nameIdentifier');
                        foreach ($elements as $element){
                            if ($element->getAttribute('type')=='authorId'){
                                array_push($authors, $element->nodeValue);
                            }
                        }
                        $edited = true;
                    }
                }
            }
        }
        
        $this->save_authors($authors);
        if ($edited)
            return $this->get_dom()->saveXML();
        else
            return $this->get_mxds_content();
    }
    
    private function save_authors($authors){
        $filename = $this->options['authors_file'];
        if ($this->options['wd'])
            $wd = $this->options['wd'].'/';
        else
            $wd = null;
        
        $fid = fopen($wd.$filename, 'a');
        foreach ($authors as $author){
            fwrite($fid, $author."\n");
        }
        fclose($fid);
    }    
}

/********************************************************************
 *
 *
 *
 ********************************************************************/
class update_aut_dep_name extends batch_edit_mads{
    
    protected function edit_mxds(){
        $this->set_dom();
        $this->set_xpath();
        $sections = $this->get_xpath()->query('//mads:mads/mads:affiliation');
        
        $edited = false;
        foreach ($sections as $section){
            $affiliation = preg_replace('/\s+/', ' ',$section->getElementsByTagName('organization')->item(0)->nodeValue);
            if ($affiliation == $this->options['current']){
                $section->getElementsByTagName('organization')->item(0)->nodeValue = $this->options['new'];
                $edited = true;
            }
        }
        if ($edited)
            return $this->get_dom()->saveXML();
        else
            return $this->get_mxds_content();
    }   
}

/********************************************************************
 * 
 * 
 * 
********************************************************************/
class test_edit extends batch_edit_mods{
    
    protected $update_dc = true;
    
    protected function edit_mxds(){
        return str_replace('bsgd','abc',  $this->get_mxds_content());
        
    }
}


/********************************************************************
 *
 *
 *
 ********************************************************************/
class cit_count_ingest extends command{
    private $did = 'CIT-DATA';
    private $max_size;
    
    private function set_max_size(){
        if (isset($this->options['max_size']))
            $this->max_size = $this->options['max_size'];
        else
            $this->max_size = 3;
    }
    
    protected function _dry_exec(){
        //        $this->retrieve_islandora_object();
        $this->set_max_size();
        if (!$this->object){
            $this->message .= $this->get_pid().': object not found';
            $this->stop = true;
        }
        else{
            $this->content=$this->get_content();    
            if (empty($this->content)){
                $this->message .= $this->get_pid().': XML file NOT found';
                $this->stop = true;
            }
            else {
                $this->message .= $this->get_pid().': XML file found; ';
                if ($this->object[$this->did])
                    $this->message .= sizeof($this->object[$this->did]).' datastream version(s) ';
            }       
        }
    }
    
    protected function _exec(){
        //Datastream purging
        if ($this->max_size == 0){
            $this->object->purgeDatastream($this->did);
            $this->message .= '- Datestream purged';
            return;
        }
        
        
        $cit_ds = $this->object[$this->did];        
        if ($cit_ds){
            $cit_ds->content = $this->content;
        }
        else {
            $cit_ds = $this->object->constructDatastream($this->did); //maybe $control_group is required
            $cit_ds->label = 'Citation related information';
            $cit_ds->content = $this->content;
            $this->object->ingestDatastream($cit_ds);
        }
        $this->message .= '- ingested';
        
        //Old ds deletion
        if (sizeof($cit_ds) > $this->max_size){
            $count = 0;
            $th = sizeof($cit_ds);
            for ($ii = $this->max_size; $ii < $th; $ii++){
                try {
                    unset($cit_ds[$this->max_size]);
                    $count++;
                }
                catch (Exception $e) {
                    $del_err = true;
                }
            }
            if ($del_error)
                $this->message .= ' - datastream deletion error(s)';
            $this->message .= ' - '.$count.' version(s) deleted, '.sizeof($cit_ds).' remaining'; 
        }

    }
    
    private function get_content(){
        $filename = $this->options['dirname']."/".str_replace(':', '_', $this->pid).'.xml';
        $content = file_get_contents($filename);
        return $content;
    }
    
    private function ingest_citcount($pid, $xml_data){
        $did = 'CIT-DATA';
        $object = islandora_object_load($pid);
        $cit_ds = $object[$did]; //Data stream selection
        
        if ($cit_ds){
            $cit_ds->content = $xml_data;
        }
        else {
            $cit_ds = $object->constructDatastream($did); //maybe $control_group is required
            $cit_ds->label = 'Citation related information';
            $cit_ds->content = $xml_data;
            $object->ingestDatastream($cit_ds);
        }
    }
}

/********************************************************************
 *
 * class functions to add a PDF(A) datastream
 * based on class cit_count_ingest
 * Example:
 * drush -u 1 -r /var/www/html dora-batch --pids=single --pids_options='pid=eawag:679' --command=pdfa_ingest --command_options='pdfa=/tmp/eawag-679.PDF.1542369045.PDF-A.pdf|dsId=PDF_PDF-A|dsLabel=eawag-679.PDF.1542369045.PDF-A.pdf' --dry=false
 * 
 ********************************************************************/
class pdfa_ingest extends command{

	private $pidNow = "";
	private $pdfa = "";		/* = $file_uri */
	private $dsId = "";		/* = $datastream_id */
	private $dsLabel = "";		/* = $datastream_label */
	private $dsRedo = FALSE;	/* = $force_fresh */

	private function get_content($file_path) {
		$content = file_get_contents($file_path);
		if ($content) {
			return $content;
		}
		$file_path = '/tmp/pdfa.'.strtr($this->get_pid(),":","-").'.'.time().'.pdf';
		return file_get_contents($file_path);
	}

	private function get_options_pdfa() {
		$this->pidNow = empty($this->get_pid()) ? $this->options['pid'] : $this->get_pid();
		$this->pdfa = $this->options['pdfa'];		/* = $file_uri */
		$this->dsId = $this->options['dsId'];		/* = $datastream_id */
		$this->dsLabel = $this->options['dsLabel'];		/* = $datastream_label */
		if( @isset($this->options['dsRedo']) ) {
			$this->dsLabel = $this->options['dsRedo'];		/* = $force_fresh */
		}
	}

	protected function _dry_exec(){
		$this->get_options_pdfa();
		if ( !$this->object || empty($this->pidNow) || empty($this->pdfa) || empty($this->dsId) || empty($this->dsLabel) ) {
			$this->message .= 'Error: Insufficient PDF/A or datastream parameters for ' . $pidNow . '. ';
			$this->stop = true;
			return;
		}
		$this->content = $this->get_content($this->pdfa);	
		if (empty($this->content)){
			$this->message .= 'Error: '. $this->pidNow . ' got a broken PDF/A. ';
			$this->stop = true;
			return;
		}
		$this->message .= 'Success: PDF/A accepted for '. $this->pidNow . '. ';
	}

	protected function _exec(){
		$this->get_options_pdfa();
		if ( !$this->object || empty($this->pidNow) || empty($this->pdfa) || empty($this->dsId) || empty($this->dsLabel) ) {
			$this->message .= 'Error: Insufficient PDF/A or datastream settings for ' . $pidNow . '. ';
			$this->stop = true;
			return;
		}
		$dsItem = $this->object[$this->dsId];
		if ($dsItem){
			if (!$dsRedo) {
				return;
			}
			$this->object->purgeDatastream($this->dsId);
			$this->message .= 'Notice: PDF/A datestream purged to recreate it. ';
		}
		else {
			$dsItem = $this->object->constructDatastream($this->dsId);		// M is the (default) control_group
			$this->message .= 'Notice: New PDF/A datestream just created now. ';
		}
		$dsItem->label = $this->dsLabel;
		$dsItem->content = $this->get_content($this->pdfa);
		$this->object->ingestDatastream($dsItem);
	}
	
	private function ingest_pdfa(){
		$pidNow = empty($this->get_pid()) ? $this->options['pid'] : $this->get_pid();
		$pdfa = $this->options['pdfa'];		/* = $file_uri */
		$dsId = $this->options['dsId'];		/* = $datastream_id */
		$dsLabel = $this->options['dsLabel'];		/* = $datastream_label */
		if( @isset($this->options['dsRedo']) ) {
			$dsRedo = $this->options['dsRedo'];		/* = $force_fresh */
		}

		$object = islandora_object_load($pidNow);
		if ($object) {
			$dsItem = $object->constructDatastream($dsId);		// M is the (default) control_group
			$dsItem->label = $dsLabel;
			$dsItem->content = get_content($pdfa);
			$object->ingestDatastream($dsItem);
		}
	}

}

/********************************************************************
 *
 *
 *
 ********************************************************************/
class cit_count_detect extends command{
    
    private function get_mods_content(){
        $this->mods_content =  $this->object['MODS']->content;
    }
    
    private function get_id_labels(){
        return explode(';',$this->options['idlabels']);  
    }
    
    private function get_identifier($id_label){
        try{
            return $this->xpath->query("//mods:mods/mods:identifier [@type='$id_label']")->item(0)->nodeValue;
        }
        catch (Exception $e){
            return 0;
        }
    }
    
    protected function _dry_exec(){
        $this->dom = new DOMDocument();
        $this->get_mods_content();
        $this->dom->loadXML($this->mods_content);
        $this->xpath = new DOMXPath($this->dom);
        
        $this->ids_string = $this->get_pid().$this->options['idsep'];
        $this->identifiers = [];
        $id_labels = $this->get_id_labels();
        $this->stop = true;
        if ($this->mods_content){
            foreach ($id_labels as $id_label){
                $this->identifiers[$id_label] = $this->get_identifier($id_label);
                $this->ids_string .= $this->get_identifier($id_label).$this->options['idsep'];
                if (!empty($this->identifiers[$id_label]))
                    $this->stop = false;
            }
        }
        if ($this->stop == true){
            $this->message .= $this->get_pid().' NO IDs found';
        }
        else{
            $this->message .= $this->ids_string;
        }
    }

    protected function _exec(){
        $file_path = $this->options['wd'].'/'.$this->options['outfile'];
        $fid = fopen($file_path, 'a');        
        fwrite($fid, $this->ids_string."\n");
        fclose($fid);
    }
    
}
